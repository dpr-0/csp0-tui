[tool.poetry]
name = "csp0-tui"
version = "0.1.0"
description = ""
authors = ["DPR <dpr-0xff@pm.me>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
textual = "^0.43"
textual-web = "^0.6.0"
pyjwt = "^2.8.0"
httpx = "^0.25.2"
pyperclip = "^1.8.2"
websockets = "^12.0"
python-dotenv = "^1.0.0"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
mypy = "^1.6.1"
pre-commit = "^3.5.0"
textual-dev = "^1.2.1"
ruff = "^0.1.5"
commitizen = "^3.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/

)
'''

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov=app"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
